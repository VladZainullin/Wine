// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Colors.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_color");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_color_title");

                    b.ToTable("color", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SugarContents.SugarContent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_sugar_content");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_sugar_content_title");

                    b.ToTable("sugar_content", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Wines.Wine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("color_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("SugarContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("sugar_content_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_wines");

                    b.HasIndex("ColorId")
                        .HasDatabaseName("ix_wines_color_id");

                    b.HasIndex("SugarContentId")
                        .HasDatabaseName("ix_wines_sugar_content_id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_wines_title");

                    b.ToTable("wines", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Wines.Wine", b =>
                {
                    b.HasOne("Domain.Entities.Colors.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wines_color_color_id");

                    b.HasOne("Domain.Entities.SugarContents.SugarContent", "SugarContent")
                        .WithMany()
                        .HasForeignKey("SugarContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wines_sugar_content_sugar_content_id");

                    b.Navigation("Color");

                    b.Navigation("SugarContent");
                });
#pragma warning restore 612, 618
        }
    }
}
